<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="QuXianShangShuo.TrayLocation" type="System.Drawing.Point, System.Drawing">
    <value>17, 17</value>
  </data>
  <data name="axiPlotX1.OcxState" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj0yLjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACFTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5BeEhvc3QrU3RhdGUBAAAABERhdGEHAgIAAAAJAwAAAA8DAAAAMiQAAAIB
        AAAAAQAAAAAmAAAAezMwN0QzMTYwLUNFOTEtNDYxMy05QkVGLUM1NTU5ODkyMDgwMn0AAAAA9yMAAFRQ
        RjAGVGlQbG90AARMZWZ0AgADVG9wAgAFV2lkdGgDNQIGSGVpZ2h0A4oBF09wdGlvblNhdmVBbGxQcm9w
        ZXJ0aWVzCA1EYXRhVmlld1pIb3J6AgENRGF0YVZpZXdaVmVydAIED1ByaW50TWFyZ2luTGVmdAUAAAAA
        AAAAgP8/DlByaW50TWFyZ2luVG9wBQAAAAAAAACA/z8QUHJpbnRNYXJnaW5SaWdodAUAAAAAAAAAgP8/
        EVByaW50TWFyZ2luQm90dG9tBQAAAAAAAACA/z8RUHJpbnREb2N1bWVudE5hbWUGCFVudGl0bGVkCkhp
        bnRzUGF1c2UCnQ5IaW50c0hpZGVQYXVzZQOIExFIaW50c0ZvbnQuQ2hhcnNldAcPREVGQVVMVF9DSEFS
        U0VUD0hpbnRzRm9udC5Db2xvcgcMY2xXaW5kb3dUZXh0EEhpbnRzRm9udC5IZWlnaHQC9Q5IaW50c0Zv
        bnQuTmFtZQYNTVMgU2FucyBTZXJpZg9IaW50c0ZvbnQuU3R5bGULAA9FZGl0b3JGb3JtU3R5bGUHCWlw
        ZnNNb2RhbBVDb3B5VG9DbGlwQm9hcmRGb3JtYXQHDGlwZWZNZXRhRmlsZQxUaXRsZVZpc2libGUICVRp
        dGxlVGV4dAYIVW50aXRsZWQRVGl0bGVGb250LkNoYXJzZXQHD0RFRkFVTFRfQ0hBUlNFVA9UaXRsZUZv
        bnQuQ29sb3IHB2NsV2hpdGUQVGl0bGVGb250LkhlaWdodALtDlRpdGxlRm9udC5OYW1lBgVBcmlhbA9U
        aXRsZUZvbnQuU3R5bGULBmZzQm9sZAAdQW5ub3RhdGlvbkRlZmF1bHRGb250LkNoYXJzZXQHD0RFRkFV
        TFRfQ0hBUlNFVBtBbm5vdGF0aW9uRGVmYXVsdEZvbnQuQ29sb3IHB2NsV2hpdGUcQW5ub3RhdGlvbkRl
        ZmF1bHRGb250LkhlaWdodAL1GkFubm90YXRpb25EZWZhdWx0Rm9udC5OYW1lBg1NUyBTYW5zIFNlcmlm
        G0Fubm90YXRpb25EZWZhdWx0Rm9udC5TdHlsZQsAG0Fubm90YXRpb25EZWZhdWx0QnJ1c2hTdGx5ZQcH
        YnNTb2xpZBtBbm5vdGF0aW9uRGVmYXVsdEJydXNoQ29sb3IHB2NsV2hpdGUZQW5ub3RhdGlvbkRlZmF1
        bHRQZW5TdGx5ZQcHcHNTb2xpZBlBbm5vdGF0aW9uRGVmYXVsdFBlbkNvbG9yBwdjbFdoaXRlGUFubm90
        YXRpb25EZWZhdWx0UGVuV2lkdGgCARVDbGlwQW5ub3RhdGlvbnNUb0F4ZXMJGUJhY2tHcm91bmRHcmFk
        aWVudEVuYWJsZWQIG0JhY2tHcm91bmRHcmFkaWVudERpcmVjdGlvbgcMaWZkVG9wQm90dG9tHEJhY2tH
        cm91bmRHcmFkaWVudFN0YXJ0Q29sb3IHBmNsQmx1ZRtCYWNrR3JvdW5kR3JhZGllbnRTdG9wQ29sb3IH
        B2NsQmxhY2sNRGF0YVZpZXdaSG9yegIBDURhdGFWaWV3WlZlcnQCBA5Ub29sQmFyTWFuYWdlcg4BBE5h
        bWUGCVRvb2xiYXIgMQpIb3Jpem9udGFsCQZaT3JkZXICAwtTdG9wUGVyY2VudAUAAAAAAAAAyAVAEFNo
        b3dSZXN1bWVCdXR0b24ID1Nob3dQYXVzZUJ1dHRvbggQU2hvd1NlbGVjdEJ1dHRvbgkOU2hvd0NvcHlC
        dXR0b24IDlNob3dTYXZlQnV0dG9uCA9TaG93UHJpbnRCdXR0b24ID1pvb21Jbk91dEZhY3RvcgUAAAAA
        AAAAgABACkZsYXRCb3JkZXIJDFNtYWxsQnV0dG9ucwkAAA1MZWdlbmRNYW5hZ2VyDgEETmFtZQYITGVn
        ZW5kIDEKSG9yaXpvbnRhbAgGWk9yZGVyAgULU3RvcFBlcmNlbnQFAAAAAAAAAMgFQApNYXJnaW5MZWZ0
        BQAAAAAAAACA/z8JTWFyZ2luVG9wBQAAAAAAAACA/z8LTWFyZ2luUmlnaHQFAAAAAAAAAID/PwxNYXJn
        aW5Cb3R0b20FAAAAAAAAAID/PxhTZWxlY3RlZEl0ZW1Gb250LkNoYXJzZXQHD0RFRkFVTFRfQ0hBUlNF
        VBZTZWxlY3RlZEl0ZW1Gb250LkNvbG9yBwdjbEJsYWNrF1NlbGVjdGVkSXRlbUZvbnQuSGVpZ2h0AvUV
        U2VsZWN0ZWRJdGVtRm9udC5OYW1lBg1NUyBTYW5zIFNlcmlmFlNlbGVjdGVkSXRlbUZvbnQuU3R5bGUL
        ABJDYXB0aW9uQ29sdW1uVGl0bGUGBVRpdGxlF0NhcHRpb25Db2x1bW5YQXhpc1RpdGxlBgZYLUF4aXMX
        Q2FwdGlvbkNvbHVtbllBeGlzVGl0bGUGBlktQXhpcxNDYXB0aW9uQ29sdW1uWFZhbHVlBgFYE0NhcHRp
        b25Db2x1bW5ZVmFsdWUGAVkRQ2FwdGlvbkNvbHVtbllNYXgGBVktTWF4EUNhcHRpb25Db2x1bW5ZTWlu
        BgVZLU1pbhJDYXB0aW9uQ29sdW1uWU1lYW4GBlktTWVhbgxGb250LkNoYXJzZXQHD0RFRkFVTFRfQ0hB
        UlNFVApGb250LkNvbG9yBwdjbFdoaXRlC0ZvbnQuSGVpZ2h0AvUJRm9udC5OYW1lBg1NUyBTYW5zIFNl
        cmlmCkZvbnQuU3R5bGULAA1Db2x1bW5TcGFjaW5nBQAAAAAAAACA/j8KUm93U3BhY2luZwUAAAAAAAAA
        gP0/E1dyYXBDb2xEZXNpcmVkQ291bnQCARdXcmFwQ29sQXV0b0NvdW50RW5hYmxlZAgTV3JhcENvbEF1
        dG9Db3VudE1heAJkEVdyYXBDb2xTcGFjaW5nTWluBQAAAAAAAACAAEASV3JhcENvbFNwYWNpbmdBdXRv
        CRNXcmFwUm93RGVzaXJlZENvdW50AgUXV3JhcFJvd0F1dG9Db3VudEVuYWJsZWQJE1dyYXBSb3dBdXRv
        Q291bnRNYXgCZBFXcmFwUm93U3BhY2luZ01pbgUAAAAAAAAAgP0/EldyYXBSb3dTcGFjaW5nQXV0bwgY
        Q29sdW1uVGl0bGVzRm9udC5DaGFyc2V0Bw9ERUZBVUxUX0NIQVJTRVQWQ29sdW1uVGl0bGVzRm9udC5D
        b2xvcgcGY2xBcXVhF0NvbHVtblRpdGxlc0ZvbnQuSGVpZ2h0AvUVQ29sdW1uVGl0bGVzRm9udC5OYW1l
        Bg1NUyBTYW5zIFNlcmlmFkNvbHVtblRpdGxlc0ZvbnQuU3R5bGULBmZzQm9sZAAAAAxYQXhpc01hbmFn
        ZXIOAQROYW1lBghYLUF4aXMgMQpIb3Jpem9udGFsCQZaT3JkZXICAAtTdG9wUGVyY2VudAUAAAAAAAAA
        yAVABFNwYW4FAAAAAAAAAMgFQAVUaXRsZQYIWC1BeGlzIDELVGl0bGVNYXJnaW4FAAAAAAAAAID9PxFU
        aXRsZUZvbnQuQ2hhcnNldAcPREVGQVVMVF9DSEFSU0VUD1RpdGxlRm9udC5Db2xvcgcHY2xXaGl0ZRBU
        aXRsZUZvbnQuSGVpZ2h0AvMOVGl0bGVGb250Lk5hbWUGBUFyaWFsD1RpdGxlRm9udC5TdHlsZQsGZnNC
        b2xkAAxMYWJlbHNNYXJnaW4FAAAAAAAAAID9PxJMYWJlbHNGb250LkNoYXJzZXQHD0RFRkFVTFRfQ0hB
        UlNFVBBMYWJlbHNGb250LkNvbG9yBwdjbFdoaXRlEUxhYmVsc0ZvbnQuSGVpZ2h0AvUPTGFiZWxzRm9u
        dC5OYW1lBg1NUyBTYW5zIFNlcmlmEExhYmVsc0ZvbnQuU3R5bGULAA9MYWJlbFNlcGFyYXRpb24FAAAA
        AAAAAIAAQBFMYWJlbHNGb3JtYXRTdHlsZQcMaXB0ZkRhdGVUaW1lDkRhdGVUaW1lRm9ybWF0BghoaDpu
        bjpzcw9MYWJlbHNNaW5MZW5ndGgFAAAAAAAAAKABQA1TY2FsZUxpbmVTaG93CRJTdGFja2luZ0VuZHNN
        YXJnaW4FAAAAAAAAAID+Pw1UcmFja2luZ1N0eWxlBxBpcHRzU2Nyb2xsU21vb3RoF1RyYWNraW5nQWxp
        Z25GaXJzdFN0eWxlBwlpcGFmc0F1dG8UQ3Vyc29yRGF0ZVRpbWVGb3JtYXQGCGhoOm5uOnNzD0N1cnNv
        clByZWNpc2lvbgIDD0N1cnNvck1pbkxlbmd0aAUAAAAAAAAAoAFAFExlZ2VuZERhdGVUaW1lRm9ybWF0
        BghoaDpubjpzcw9MZWdlbmRQcmVjaXNpb24CAw9MZWdlbmRNaW5MZW5ndGgFAAAAAAAAAKABQAxDdXJz
        b3JTY2FsZXIFAAAAAAAAAID/PxNTY3JvbGxNaW5NYXhFbmFibGVkCAlTY3JvbGxNYXgFAAAAAAAAAMgF
        QBVSZXN0b3JlVmFsdWVzT25SZXN1bWUJDU1hc3RlclVJSW5wdXQIDkNhcnRlc2lhblN0eWxlBwhpcGNz
        Tm9uZRBHcmlkTGluZXNWaXNpYmxlCQAADFlBeGlzTWFuYWdlcg4BBE5hbWUGB0RpYW5MaXUHVmlzaWJs
        ZQgKSG9yaXpvbnRhbAgGWk9yZGVyAgMLU3RvcFBlcmNlbnQFAAAAAAAAAMgFQARTcGFuBQAAAAAAAADw
        A0AFVGl0bGUGCFktQXhpcyAxC1RpdGxlTWFyZ2luBQAAAAAAAACA/T8RVGl0bGVGb250LkNoYXJzZXQH
        D0RFRkFVTFRfQ0hBUlNFVA9UaXRsZUZvbnQuQ29sb3IHB2NsV2hpdGUQVGl0bGVGb250LkhlaWdodALz
        DlRpdGxlRm9udC5OYW1lBgVBcmlhbA9UaXRsZUZvbnQuU3R5bGULBmZzQm9sZAAMTGFiZWxzTWFyZ2lu
        BQAAAAAAAACA/T8STGFiZWxzRm9udC5DaGFyc2V0Bw9ERUZBVUxUX0NIQVJTRVQQTGFiZWxzRm9udC5D
        b2xvcgcHY2xXaGl0ZRFMYWJlbHNGb250LkhlaWdodAL1D0xhYmVsc0ZvbnQuTmFtZQYNTVMgU2FucyBT
        ZXJpZhBMYWJlbHNGb250LlN0eWxlCwAPTGFiZWxTZXBhcmF0aW9uBQAAAAAAAACAAEAORGF0ZVRpbWVG
        b3JtYXQGCGhoOm5uOnNzD0xhYmVsc01pbkxlbmd0aAUAAAAAAAAAoAFADVNjYWxlTGluZVNob3cJElN0
        YWNraW5nRW5kc01hcmdpbgUAAAAAAAAAgP4/DVRyYWNraW5nU3R5bGUHD2lwdHNTY2FsZU1pbk1heBdU
        cmFja2luZ0FsaWduRmlyc3RTdHlsZQcJaXBhZnNOb25lFEN1cnNvckRhdGVUaW1lRm9ybWF0BghoaDpu
        bjpzcw9DdXJzb3JQcmVjaXNpb24CAw9DdXJzb3JNaW5MZW5ndGgFAAAAAAAAAKABQBRMZWdlbmREYXRl
        VGltZUZvcm1hdAYIaGg6bm46c3MPTGVnZW5kUHJlY2lzaW9uAgMPTGVnZW5kTWluTGVuZ3RoBQAAAAAA
        AACgAUAMQ3Vyc29yU2NhbGVyBQAAAAAAAACA/z8TU2Nyb2xsTWluTWF4RW5hYmxlZAgJU2Nyb2xsTWF4
        BQAAAAAAAADIBUAVUmVzdG9yZVZhbHVlc09uUmVzdW1lCQ1NYXN0ZXJVSUlucHV0CA5DYXJ0ZXNpYW5T
        dHlsZQcIaXBjc05vbmUQR3JpZExpbmVzVmlzaWJsZQkAAQROYW1lBgZHb25nTHYHVmlzaWJsZQgKSG9y
        aXpvbnRhbAgGWk9yZGVyAgILU3RvcFBlcmNlbnQFAAAAAAAAAMgFQARTcGFuBQAAAAAAAIC7CkAFVGl0
        bGUGCFktQXhpcyAxC1RpdGxlTWFyZ2luBQAAAAAAAACA/T8RVGl0bGVGb250LkNoYXJzZXQHD0RFRkFV
        TFRfQ0hBUlNFVA9UaXRsZUZvbnQuQ29sb3IHB2NsV2hpdGUQVGl0bGVGb250LkhlaWdodALzDlRpdGxl
        Rm9udC5OYW1lBgVBcmlhbA9UaXRsZUZvbnQuU3R5bGULBmZzQm9sZAAMTGFiZWxzTWFyZ2luBQAAAAAA
        AACA/T8STGFiZWxzRm9udC5DaGFyc2V0Bw9ERUZBVUxUX0NIQVJTRVQQTGFiZWxzRm9udC5Db2xvcgcH
        Y2xXaGl0ZRFMYWJlbHNGb250LkhlaWdodAL1D0xhYmVsc0ZvbnQuTmFtZQYNTVMgU2FucyBTZXJpZhBM
        YWJlbHNGb250LlN0eWxlCwAPTGFiZWxTZXBhcmF0aW9uBQAAAAAAAACAAEAORGF0ZVRpbWVGb3JtYXQG
        CGhoOm5uOnNzD0xhYmVsc01pbkxlbmd0aAUAAAAAAAAAoAFADVNjYWxlTGluZVNob3cJElN0YWNraW5n
        RW5kc01hcmdpbgUAAAAAAAAAgP4/DVRyYWNraW5nU3R5bGUHD2lwdHNTY2FsZU1pbk1heBdUcmFja2lu
        Z0FsaWduRmlyc3RTdHlsZQcJaXBhZnNOb25lFEN1cnNvckRhdGVUaW1lRm9ybWF0BghoaDpubjpzcw9D
        dXJzb3JQcmVjaXNpb24CAw9DdXJzb3JNaW5MZW5ndGgFAAAAAAAAAKABQBRMZWdlbmREYXRlVGltZUZv
        cm1hdAYIaGg6bm46c3MPTGVnZW5kUHJlY2lzaW9uAgMPTGVnZW5kTWluTGVuZ3RoBQAAAAAAAACgAUAM
        Q3Vyc29yU2NhbGVyBQAAAAAAAACA/z8TU2Nyb2xsTWluTWF4RW5hYmxlZAgJU2Nyb2xsTWF4BQAAAAAA
        AADIBUAVUmVzdG9yZVZhbHVlc09uUmVzdW1lCQ1NYXN0ZXJVSUlucHV0CA5DYXJ0ZXNpYW5TdHlsZQcI
        aXBjc05vbmUQR3JpZExpbmVzVmlzaWJsZQkAAQROYW1lBgRZYUxpCkhvcml6b250YWwIBlpPcmRlcgIB
        C1N0b3BQZXJjZW50BQAAAAAAAADIBUADTWluBQDQzMzMzMzM+78EU3BhbgUAAAAAAAAAoAFABVRpdGxl
        BghZLUF4aXMgMQtUaXRsZU1hcmdpbgUAAAAAAAAAgP0/EVRpdGxlRm9udC5DaGFyc2V0Bw9ERUZBVUxU
        X0NIQVJTRVQPVGl0bGVGb250LkNvbG9yBwdjbFdoaXRlEFRpdGxlRm9udC5IZWlnaHQC8w5UaXRsZUZv
        bnQuTmFtZQYFQXJpYWwPVGl0bGVGb250LlN0eWxlCwZmc0JvbGQADExhYmVsc01hcmdpbgUAAAAAAAAA
        gP0/EkxhYmVsc0ZvbnQuQ2hhcnNldAcPREVGQVVMVF9DSEFSU0VUEExhYmVsc0ZvbnQuQ29sb3IHB2Ns
        V2hpdGURTGFiZWxzRm9udC5IZWlnaHQC9Q9MYWJlbHNGb250Lk5hbWUGDU1TIFNhbnMgU2VyaWYQTGFi
        ZWxzRm9udC5TdHlsZQsAD0xhYmVsU2VwYXJhdGlvbgUAAAAAAAAAgABADkRhdGVUaW1lRm9ybWF0Bgho
        aDpubjpzcw9MYWJlbHNNaW5MZW5ndGgFAAAAAAAAAKABQA1TY2FsZUxpbmVTaG93CRJTdGFja2luZ0Vu
        ZHNNYXJnaW4FAAAAAAAAAID+Pw1UcmFja2luZ1N0eWxlBw9pcHRzU2NhbGVNaW5NYXgXVHJhY2tpbmdB
        bGlnbkZpcnN0U3R5bGUHCWlwYWZzTm9uZRRDdXJzb3JEYXRlVGltZUZvcm1hdAYIaGg6bm46c3MPQ3Vy
        c29yUHJlY2lzaW9uAgMPQ3Vyc29yTWluTGVuZ3RoBQAAAAAAAACgAUAUTGVnZW5kRGF0ZVRpbWVGb3Jt
        YXQGCGhoOm5uOnNzD0xlZ2VuZFByZWNpc2lvbgIDD0xlZ2VuZE1pbkxlbmd0aAUAAAAAAAAAoAFADEN1
        cnNvclNjYWxlcgUAAAAAAAAAgP8/E1Njcm9sbE1pbk1heEVuYWJsZWQICVNjcm9sbE1heAUAAAAAAAAA
        yAVAFVJlc3RvcmVWYWx1ZXNPblJlc3VtZQkNTWFzdGVyVUlJbnB1dAgOQ2FydGVzaWFuU3R5bGUHCGlw
        Y3NOb25lEEdyaWRMaW5lc1Zpc2libGUJAAEETmFtZQYCSHoHVmlzaWJsZQgKSG9yaXpvbnRhbAgGWk9y
        ZGVyAgALU3RvcFBlcmNlbnQFAAAAAAAAAMgFQARTcGFuBQAAAAAAAADIBUAFVGl0bGUGCFktQXhpcyAy
        C1RpdGxlTWFyZ2luBQAAAAAAAACA/T8RVGl0bGVGb250LkNoYXJzZXQHD0RFRkFVTFRfQ0hBUlNFVA9U
        aXRsZUZvbnQuQ29sb3IHB2NsV2hpdGUQVGl0bGVGb250LkhlaWdodALzDlRpdGxlRm9udC5OYW1lBgVB
        cmlhbA9UaXRsZUZvbnQuU3R5bGULBmZzQm9sZAAMTGFiZWxzTWFyZ2luBQAAAAAAAACA/T8STGFiZWxz
        Rm9udC5DaGFyc2V0Bw9ERUZBVUxUX0NIQVJTRVQQTGFiZWxzRm9udC5Db2xvcgcHY2xXaGl0ZRFMYWJl
        bHNGb250LkhlaWdodAL1D0xhYmVsc0ZvbnQuTmFtZQYNTVMgU2FucyBTZXJpZhBMYWJlbHNGb250LlN0
        eWxlCwAPTGFiZWxTZXBhcmF0aW9uBQAAAAAAAACAAEAORGF0ZVRpbWVGb3JtYXQGCGhoOm5uOnNzD0xh
        YmVsc01pbkxlbmd0aAUAAAAAAAAAoAFADVNjYWxlTGluZVNob3cJElN0YWNraW5nRW5kc01hcmdpbgUA
        AAAAAAAAgP4/DVRyYWNraW5nU3R5bGUHD2lwdHNTY2FsZU1pbk1heBdUcmFja2luZ0FsaWduRmlyc3RT
        dHlsZQcJaXBhZnNOb25lFEN1cnNvckRhdGVUaW1lRm9ybWF0BghoaDpubjpzcw9DdXJzb3JQcmVjaXNp
        b24CAw9DdXJzb3JNaW5MZW5ndGgFAAAAAAAAAKABQBRMZWdlbmREYXRlVGltZUZvcm1hdAYIaGg6bm46
        c3MPTGVnZW5kUHJlY2lzaW9uAgMPTGVnZW5kTWluTGVuZ3RoBQAAAAAAAACgAUAMQ3Vyc29yU2NhbGVy
        BQAAAAAAAACA/z8TU2Nyb2xsTWluTWF4RW5hYmxlZAgJU2Nyb2xsTWF4BQAAAAAAAADIBUAVUmVzdG9y
        ZVZhbHVlc09uUmVzdW1lCQ1NYXN0ZXJVSUlucHV0CA5DYXJ0ZXNpYW5TdHlsZQcIaXBjc05vbmUQR3Jp
        ZExpbmVzVmlzaWJsZQkAAA5DaGFubmVsTWFuYWdlcg4BBE5hbWUGBkRpYW5MdhNNYXJrZXJzVHVybk9m
        ZkxpbWl0AgAJWEF4aXNOYW1lBghYLUF4aXMgMQlZQXhpc05hbWUGB0RpYW5MaXUJRGF0YVN0eWxlBwxp
        cGRzU3RhbmRhcmQPT1BDQ29tcHV0ZXJOYW1lBgVMb2NhbBNEaWdpdGFsUmVmZXJlbmNlTG93BQAAAAAA
        AACgAkAURGlnaXRhbFJlZmVyZW5jZUhpZ2gFAAAAAAAAALQFQAhCYXJXaWR0aAUAAAAAAAAAoAFAAAEE
        TmFtZQYGR29uZ0x2CVRpdGxlVGV4dAYJQ2hhbm5lbCAyBUNvbG9yBwhjbFllbGxvdxNNYXJrZXJzVHVy
        bk9mZkxpbWl0AgAJWEF4aXNOYW1lBghYLUF4aXMgMQlZQXhpc05hbWUGBkdvbmdMdglEYXRhU3R5bGUH
        DGlwZHNTdGFuZGFyZA9PUENDb21wdXRlck5hbWUGBUxvY2FsE0RpZ2l0YWxSZWZlcmVuY2VMb3cFAAAA
        AAAAAKACQBREaWdpdGFsUmVmZXJlbmNlSGlnaAUAAAAAAAAAtAVACEJhcldpZHRoBQAAAAAAAACgAUAA
        AQROYW1lBgRZYUxpCVRpdGxlVGV4dAYJQ2hhbm5lbCAzBUNvbG9yBwZjbEJsdWUTTWFya2Vyc1R1cm5P
        ZmZMaW1pdAIACVhBeGlzTmFtZQYIWC1BeGlzIDEJWUF4aXNOYW1lBgRZYUxpCURhdGFTdHlsZQcMaXBk
        c1N0YW5kYXJkD09QQ0NvbXB1dGVyTmFtZQYFTG9jYWwTRGlnaXRhbFJlZmVyZW5jZUxvdwUAAAAAAAAA
        oAJAFERpZ2l0YWxSZWZlcmVuY2VIaWdoBQAAAAAAAAC0BUAIQmFyV2lkdGgFAAAAAAAAAKABQAABBE5h
        bWUGAkh6CVRpdGxlVGV4dAYJQ2hhbm5lbCA0BUNvbG9yBwljbEZ1Y2hzaWETTWFya2Vyc1R1cm5PZmZM
        aW1pdAIACVhBeGlzTmFtZQYIWC1BeGlzIDEJWUF4aXNOYW1lBgJIeglEYXRhU3R5bGUHDGlwZHNTdGFu
        ZGFyZA9PUENDb21wdXRlck5hbWUGBUxvY2FsE0RpZ2l0YWxSZWZlcmVuY2VMb3cFAAAAAAAAAKACQBRE
        aWdpdGFsUmVmZXJlbmNlSGlnaAUAAAAAAAAAtAVACEJhcldpZHRoBQAAAAAAAACgAUAAAA9EYXRhVmll
        d01hbmFnZXIOAQROYW1lBgtEYXRhIFZpZXcgMQpIb3Jpem9udGFsCAZaT3JkZXICAAtTdG9wUGVyY2Vu
        dAUAAAAAAAAAyAVADUdyaWRYQXhpc05hbWUGBTxBbGw+DUdyaWRZQXhpc05hbWUGBTxBbGw+E0dyaWRM
        aW5lU2hvd1lNaW5vcnMJE0dyaWRMaW5lWE1ham9yV2lkdGgCABNHcmlkTGluZVhNaW5vcldpZHRoAgAT
        R3JpZExpbmVZTWFqb3JXaWR0aAIAFEdyaWRMaW5lWU1pbm9yQ3VzdG9tCRNHcmlkTGluZVlNaW5vcldp
        ZHRoAgAAABFEYXRhQ3Vyc29yTWFuYWdlcg4BBE5hbWUGCEN1cnNvciAxB1Zpc2libGUID0NoYW5uZWxB
        bGxvd0FsbAgWQ2hhbm5lbFNob3dBbGxJbkxlZ2VuZAkFU3R5bGUHC2lwY3NWYWx1ZVhZDEZvbnQuQ2hh
        cnNldAcPREVGQVVMVF9DSEFSU0VUCkZvbnQuQ29sb3IHDGNsV2luZG93VGV4dAtGb250LkhlaWdodAL1
        CUZvbnQuTmFtZQYNTVMgU2FucyBTZXJpZgpGb250LlN0eWxlCwAFQ29sb3IHCGNsWWVsbG93D1VzZUNo
        YW5uZWxDb2xvcgkISGludFNob3cJEUhpbnRIaWRlT25SZWxlYXNlCBNIaW50T3JpZW50YXRpb25TaWRl
        Bw5pb3NCb3R0b21SaWdodAxIaW50UG9zaXRpb24FAAAAAAAAAMgEQBBQb2ludGVyMVBvc2l0aW9uBQAA
        AAAAAADIBEAQUG9pbnRlcjJQb3NpdGlvbgUAAAAAAAAA8ARAD1BvaW50ZXJQZW5XaWR0aAIBFk1lbnVJ
        dGVtVmlzaWJsZVZhbHVlWFkJFU1lbnVJdGVtVmlzaWJsZVZhbHVlWAkVTWVudUl0ZW1WaXNpYmxlVmFs
        dWVZCRVNZW51SXRlbVZpc2libGVEZWx0YVgJFU1lbnVJdGVtVmlzaWJsZURlbHRhWQkcTWVudUl0ZW1W
        aXNpYmxlSW52ZXJzZURlbHRhWAkWTWVudUl0ZW1DYXB0aW9uVmFsdWVYWQYJVmFsdWUgWC1ZFU1lbnVJ
        dGVtQ2FwdGlvblZhbHVlWAYHVmFsdWUgWBVNZW51SXRlbUNhcHRpb25WYWx1ZVkGB1ZhbHVlIFkVTWVu
        dUl0ZW1DYXB0aW9uRGVsdGFYBgZQZXJpb2QVTWVudUl0ZW1DYXB0aW9uRGVsdGFZBglQZWFrLVBlYWsc
        TWVudUl0ZW1DYXB0aW9uSW52ZXJzZURlbHRhWAYJRnJlcXVlbmN5AAAMTGFiZWxNYW5hZ2VyDgEETmFt
        ZQYFVGl0bGUHVmlzaWJsZQgKSG9yaXpvbnRhbAkGWk9yZGVyAgILU3RvcFBlcmNlbnQFAAAAAAAAAMgF
        QAdDYXB0aW9uBghVbnRpdGxlZAlBbGlnbm1lbnQHCWlhaENlbnRlcgxGb250LkNoYXJzZXQHD0RFRkFV
        TFRfQ0hBUlNFVApGb250LkNvbG9yBwdjbFdoaXRlC0ZvbnQuSGVpZ2h0Au0JRm9udC5OYW1lBgVBcmlh
        bApGb250LlN0eWxlCwZmc0JvbGQAAAAAAAs=
</value>
  </data>
</root>